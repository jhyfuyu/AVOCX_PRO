import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter


async def process_buys(message: types.Message, bot, message_id=None, flag=1, parameters=[False, False, False, False, False, False, False, False, False]):
    words = {
        'date': '–î–∞—Ç–∞',
        'place': '–ú–µ—Å—Ç–æ',
        'price': '–¶–µ–Ω–∞',
        'creative': '–ö—Ä–µ–∞—Ç–∏–≤—ã',
        'format': '–§–æ—Ä–º–∞—Ç',
        'admin': '–ê–¥–º–∏–Ω',
        'link': '–°—Å—ã–ª–∫–∞',
        'theme': '–¢–µ–º–∞—Ç–∏–∫–∞',
        'back': '–ù–∞–∑–∞–¥',
    }

    for (key, value) in enumerate(parameters):
        if value != False and value != '':
            words_key = list(words.keys())[key]
            words[words_key] = words[words_key] + '‚úÖ'
    print(words)

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
    [types.InlineKeyboardButton(text=words['date'], callback_data='date'), 
     types.InlineKeyboardButton(text=words['place'], callback_data='place')],
    [types.InlineKeyboardButton(text=words['price'], callback_data='price'), 
     types.InlineKeyboardButton(text=words['format'], callback_data='format')],
    [types.InlineKeyboardButton(text=words['creative'], callback_data='select_creative'), 
     types.InlineKeyboardButton(text=words['admin'], callback_data='admin')],
    [types.InlineKeyboardButton(text=words['link'], callback_data='link'), 
     types.InlineKeyboardButton(text=words['theme'], callback_data='theme')],
    [types.InlineKeyboardButton(text=words['back'], callback_data='on_main_menu'), 
     types.InlineKeyboardButton(text='üí´ –°–æ–∑–¥–∞—Ç—å', callback_data='create_buy')]])
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if flag == 0:
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message_id,
            text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —á—Ç–æ–±—ã –ª—É—á—à–µ –≤—Å—ë –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª–∏\n\n", 
            reply_markup=keyboard
            )
    elif flag == 1:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —á—Ç–æ–±—ã –ª—É—á—à–µ –≤—Å—ë –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª–∏\n\n", reply_markup=keyboard)


async def process_price(message: types.Message) -> None:
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')]
    ])
    await message.edit_text("–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!\n–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ –ø—Ä–∏–º–µ—Ä—É\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Äî –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö –Ω–∞–ø–∏—à–∏—Ç–µ ¬´750¬ª\n‚Äî –î–ª—è —Ü–µ–Ω—ã –∑–∞ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–ø–æ cpm*) –Ω–∞–ø–∏—à–∏—Ç–µ ¬´750—Ü–ø–º¬ª, ¬´750cpm¬ª\n\nCPM - —Ü–µ–Ω–∞ –∑–∞ —Ç—ã—Å—è—á—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n! –¶–µ–Ω–∞ –ø–æ CPM —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∑–∞ 24 —á–∞—Å–∞ !", reply_markup=keyboard)



async def buys_main_menu(callback: types.CallbackQuery) -> None:
    create = types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å', callback_data='create')
    my_buys = types.InlineKeyboardButton(text='–ú–æ–∏ –∑–∞–∫—É–ø—ã', callback_data='my_buys')
    creatives = types.InlineKeyboardButton(text='–ö—Ä–µ–∞—Ç–∏–≤—ã', callback_data='creatives')
    back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [create], [my_buys], [creatives], [back]
        ]
    )
    await callback.message.edit_text(f'–î–∞–≤–∞–π—Ç–µ –∑–∞–ª–∏–≤–∞—Ç—å —Ç—Ä–∞—Ñ–∏–∫!\n–ö–∞–Ω–∞–ª: {callback.data[4:]}\n- –ó–∞ –Ω–µ–¥–µ–ª—é –≤—ã –∑–∞–∫—É–ø–∏–ª–∏ –Ω–∞ 0 —Ä—É–±.\n- –û–ø–ª–∞—á–µ–Ω–æ 0 —Ä—É–±. / –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã 0 —Ä—É–±.\n- –ó–∞ –Ω–µ–¥–µ–ª—é –ø–æ–¥–ø–∏—Å–∞–ª–æ—Å—å: 0 / –æ—Ç–ø–∏—Å–∞–ª–æ—Å—å: 0', reply_markup=keyboard)


async def show_buttons(message, page: int, bot, buttons, flag=0):
    start_index = page * 4
    end_index = start_index + 4
    forward = types.InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data=f'page_{page + 1}')
    back = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'page_{page - 1}')
    creative = types.InlineKeyboardButton(text='+ –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤', callback_data="add_creative")
    keyboard_buttons = [[types.InlineKeyboardButton(text=f'{button_text[:10]}...', callback_data=f'creo_{buttons.index(button_text)}')] for button_text in buttons[start_index:end_index]] + [[creative], [back, forward]]

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=keyboard_buttons
    )

    await message.edit_text("–í–æ—Ç –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫—Ä–µ–∞—Ç–∏–≤—ã\n\n–¢—É—Ç –∏—Ö –º–æ–∂–Ω–æ - –¥–æ–±–∞–≤–∏—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å\n–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ (–ö—Ä–µ–æ1) - –Ω–æ–º–µ—Ä –ø–æ –ø–æ—Ä—è–¥–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞", reply_markup=keyboard)


async def check_before_create(message: types.Message, data: dict, creative: str) -> None:
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='üí´ –°–æ–∑–¥–∞—Ç—å', callback_data="final_create_buy")],
            [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data="back")]
        ]
    )
    await message.edit_text(f"üì® –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ\n\n- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data['date']}\n- –ù–∞–∑–≤–∞–Ω–∏–µ: {data['place']}\n- –¶–µ–Ω–∞: {data['price']}\n- –§–æ—Ä–º–∞—Ç: {data['format']}\n- –ö—Ä–µ–∞—Ç–∏–≤: {creative}\n- –ê–¥–º–∏–Ω: {data['admin']}\n- –°—Å—ã–ª–∫–∞: {data['link']}\n - –¢–µ–º–∞—Ç–∏–∫–∞: {data['theme']}\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ¬ª, —è —Å–æ–∑–¥–∞–º –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ!", reply_markup=keyboard)


async def message_about_created(message: types.Message, data: dict, creative: str, link: str) -> None:
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url=link)],
            [types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data="on_main_menu")]
        ]
    )
    await message.edit_text(f"–ó–∞–∫—É–ø —Å–æ–∑–¥–∞–Ω –±–æ—Ç–æ–º @AVOCX\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data['date']}\n- –ù–∞–∑–≤–∞–Ω–∏–µ: {data['place']}\n- –¶–µ–Ω–∞: {data['price']}  | –§–æ—Ä–º–∞—Ç: {data['format']}\n–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç –Ω–∏–∂–µ üëá")
    await message.answer(creative, reply_markup=keyboard)